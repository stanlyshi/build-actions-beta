#
#
# Ê≠§Êñá‰ª∂‰∏∫ÁºñËØëÊñá‰ª∂,‰∏ÄËà¨ÊÉÖÂÜµ‰∏ã‰∏ç‰ΩøÁî®Ëøô‰∏™Êù•ÂêØÂä®,ËøêË°åbuild-openwrt.yml‰ºöËá™Âä®Ëß¶ÂèëÁºñËØë
#
#


name: ÁºñËØëx86-64Âõ∫‰ª∂
on:
  # Ëß¶ÂèëÁ±ªÂûãÂèØ‰ª•Ëá™ÂÆö‰πâÔºå‰ΩÜÈ°ªÂØπÂ∫îËß¶Âèë.ymlÊñá‰ª∂ÂÜÖÁõ∏ÂêåÔºå‰æãÂ¶ÇÔºöx86-64-lxc
  repository_dispatch:
    types: [ÁºñËØëx86-64Âõ∫‰ª∂]
  workflow_dispatch:
    inputs:
      days:
        description: 'Ê∏ÖÁêÜ[X]Â§©‰πãÂâçÁöÑActionsÁ©∫Èó¥Êìç‰ΩúËÆ∞ÂΩï(ÂèØÊîπ)'
        required: true
        default: '7'
      rele:
        description: '‰øùÁïô[X]‰∏™Releases‰∏çË¢´Âà†Èô§(ÂèØÊîπ)'
        required: true
        default: '6'
  schedule:
   - cron: 0 4 1 * *
env:
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Apidz: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    name: ÁºñËØë "${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_source_x86]
        
        # [Lede_source,Lede_source_lxc,Lede_source_x86,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

    steps:
    - name: ÂáÜÂ§áÁªìÊùü
      uses: actions/checkout@v3

    - name: ËØªÂèñËÑöÊú¨
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "PVE_LXC=${PVE_LXC}" >> $GITHUB_ENV
        echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "AUTOMATIC_AMLOGIC=${AUTOMATIC_AMLOGIC}" >> $GITHUB_ENV
        echo "BUILDSOC=${BUILDSOC}" >> $GITHUB_ENV
        echo "KERNEL=${KERNEL}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "CangKu=${Apidz##*/}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV
        echo "RELEASE_DEVICE=${RELEASE_DEVICE}" >> $GITHUB_ENV
        echo "RELEASE_IP=${RELEASE_IP}" >> $GITHUB_ENV
        if [[ ${PACKAGES_ADDR} == "default" ]] || [[ ${PACKAGES_UPDATE} == "false" ]]; then
            echo "PACKAGES_ADDR=default" >> $GITHUB_ENV
            echo "PACKAGES_UPDATE=false" >> $GITHUB_ENV
        else
            git_packages=`echo "${PACKAGES_ADDR}" | awk -F/ '{print $1}'` 2>/dev/null
            git_repo=`echo "${{github.repository}}" | awk -F/ '{print $1}'` 2>/dev/null
            if [[ ${git_packages} == ${git_repo} ]]; then
                echo "PACKAGES_ADDR=${PACKAGES_ADDR}" >> $GITHUB_ENV
                echo "PACKAGES_UPDATE=${PACKAGES_UPDATE}" >> $GITHUB_ENV
            else
                echo "Êèí‰ª∂Â∫ìË¥¶Âè∑Ôºö${git_packages}"
                echo "ÂΩìÂâçË¥¶Âè∑Ôºö${git_repo}"
                echo "ËÆæÁΩÆÊèêÁ§∫ÔºöÊèí‰ª∂Â∫ìË¥¶Âè∑‰∏éÂΩìÂâçË¥¶Âè∑‰∏çÁ¨¶ÔºåÂÖ≥Èó≠\"Êèí‰ª∂Â∫ìÊõ¥Êñ∞\"ÔºåËØ∑Ê£ÄÊü•ÔºÅ"
                echo "PACKAGES_UPDATE=false" >> $GITHUB_ENV
            fi
        fi        
    - name: Êèí‰ª∂Â∫ìÊõ¥Êñ∞
      continue-on-error: true
      if: env.PACKAGES_UPDATE == 'true'
      run: |
        gitdate=$(curl -H "Authorization: token ${{ secrets.REPO_TOKEN }}" -s "https://api.github.com/repos/${{ env.PACKAGES_ADDR }}/actions/runs" | jq -r '.workflow_runs[0].created_at')
        gitdate=$(date -d "$gitdate" +%s)
        now=$(date -d "$(date '+%Y-%m-%d %H:%M:%S')" +%s)
        if [[ $(expr $gitdate + 60) < $now ]]; then
        curl -X POST https://api.github.com/repos/${{ env.PACKAGES_ADDR }}/dispatches \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
        --data '{"event_type": "updated by build-actions"}'
        fi
        echo "packages: https://github.com/${{ env.PACKAGES_ADDR }}"
        
    - name: Êï¥ÁêÜËÑöÊú¨
      run: |
        chmod -R +x "${GITHUB_WORKSPACE}/build/common"
        if [[ "${Modelfile}" == "openwrt_amlogic" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=amlogic" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "master" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lede" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "22.03" ]]; then
          echo "ZZZ=package/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lienol" >> $GITHUB_ENV
          echo "OpenWrt_name=22.03" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/99-default-settings" >> $GITHUB_ENV
          echo "CODE=Tianling" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06_tl" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/99-default-settings" >> $GITHUB_ENV
          echo "CODE=Mortal" >> $GITHUB_ENV
          echo "OpenWrt_name=21.02" >> $GITHUB_ENV
        else
          echo "Ê≤°ÂèëÁé∞ËØ•Ê∫êÁ†ÅÁöÑÂàÜÊîØÔºåÂ¶ÇÊûúÊÇ®Ê≤°Êõ¥ÊîπËøáÁöÑËØùÔºåÂ∫îËØ•ÊòØ‰∏äÊ∏∏‰ªìÂ∫ì‰øÆÊîπ‰∫ÜÔºåËØ∑ÂêåÊ≠•‰∏äÊ∏∏‰ªìÂ∫ì"
          exit 1
        fi
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "DELETE=package/base-files/files/etc/deletefile" >> $GITHUB_ENV
        source build/common/common.sh && Diy_gonggao
        
    - name: ÁºñËØëÂºÄÂßãTGÊàñpushplusÈÄöÁü•
      if: env.PUSH_PLUS_TOKEN && env.SERVERCHAN_SCKEY == 'PUSH' || env.TELEGRAM_BOT_TOKEN && env.SERVERCHAN_SCKEY == 'TELE'
      run: |
        if [[ "${SERVERCHAN_SCKEY}" == "TELE" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=üéâ ‰∏ª‰∫∫ÔºöÊÇ®Ê≠£Âú®‰ΩøÁî®„Äê${{env.CangKu}}„Äë‰ªìÂ∫ì„Äê${{matrix.target}}„ÄëÊñá‰ª∂Â§πÁºñËØë${{env.OpenWrt_name}}-${{env.CODE}}Âõ∫‰ª∂,ËØ∑ËÄêÂøÉÁ≠âÂæÖ...... üòã" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        elif [[ "${SERVERCHAN_SCKEY}" == "PUSH" ]]; then
          curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="ÂºÄÂßãÁºñËØë„Äê${{matrix.target}}„Äë" --data "content=üéâ ‰∏ª‰∫∫ÔºöÊÇ®Ê≠£Âú®‰ΩøÁî®„Äê${{env.CangKu}}„Äë‰ªìÂ∫ì„Äê${{matrix.target}}„ÄëÊñá‰ª∂Â§πÁºñËØë${{env.OpenWrt_name}}-${{env.CODE}}Âõ∫‰ª∂,ËØ∑ËÄêÂøÉÁ≠âÂæÖ...... üòãüíê" "http://www.pushplus.plus/send"
        fi
        
    - name: ÈÉ®ÁΩ≤ÁºñËØëÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex g++-multilib gawk gcc-multilib gettext git git-core gperf haveged help2man intltool lib32stdc++6 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpcap0.8-dev libpython3-dev libreadline-dev libssl-dev libtool libz-dev lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils rename rsync scons squashfs-tools subversion swig texinfo uglifyjs unzip upx upx-ucl vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove -y --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /${{matrix.target}}
        sudo chown $USER:$GROUPS /${{matrix.target}}
        if [[ "${Modelfile}" == "openwrt_amlogic" ]]; then
            docker rmi $(docker images -q)
            sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
            sudo rm -rf /etc/mysql /etc/php /swapfile
        fi
    
    - name: ‰∏ãËΩΩ"${{matrix.target}}"Ê∫êÁ†Å
      working-directory: /${{matrix.target}}
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt
        cd openwrt
        ./scripts/feeds clean
        ./scripts/feeds update -a > /dev/null 2>&1
        ln -sf /${{matrix.target}}/openwrt $GITHUB_WORKSPACE/openwrt
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
        
    - name: Âä†ËΩΩÊ∫ê,Ë°•‰∏ÅÂíåËá™ÂÆö‰πâËÆæÁΩÆ
      run: |
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        mv -f "${Home}"/build/common/*.sh "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        cd openwrt
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_BRANCH}" == "main" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          source "${PATH1}/common.sh" && Diy_Tianling
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          source "${PATH1}/common.sh" && Diy_mortal
        fi
        source "${PATH1}/common.sh" && Diy_all
        /bin/bash "${PATH1}/$DIY_PART_SH"
        ./scripts/feeds update -a
        ./scripts/feeds install -a -p openwrt-packages
        ./scripts/feeds install -a > /dev/null 2>&1
        mv "${PATH1}/$CONFIG_FILE" .config
        if [[ "${REGULAR_UPDATE}" == "true" ]] && [[ ${PVE_LXC} != "true" ]]; then
          source "${PATH1}/upgrade.sh" && Diy_Part1
        fi
      
    - name: ÁºìÂ≠òÂä†ÈÄü
      if: env.USE_CACHEWRTBUILD == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "${{ env.TARGET_PROFILE }}"
        prefix: ${{ github.workspace }}/openwrt

    - name: ÁîüÊàê.configÊñá‰ª∂
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chajian > /dev/null 2>&1
        make defconfig > /dev/null 2>&1
        echo "TARGET_BOARD=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV
        if [ `grep -c "CONFIG_TARGET_x86_64=y" .config` -eq '1' ]; then
            echo "TARGET_PROFILE=x86-64" >> $GITHUB_ENV
        elif [[ `grep -c "CONFIG_TARGET_x86=y" .config` == '1' ]] && [[ `grep -c "CONFIG_TARGET_x86_64=y" .config` == '0' ]]; then
            echo "TARGET_PROFILE=x86_32" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET.*DEVICE.*=y" .config` -eq '1' ]; then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "TARGET_PROFILE=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "TARGET_PROFILE=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        fi
        
    - name: ÁºñËØë‰ø°ÊÅØ
      continue-on-error: true
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chuli > /dev/null 2>&1
        if [ "${BY_INFORMATION}" == "true" ]; then
          source "${PATH1}/upgrade.sh" && GET_TARGET_INFO
          source "${PATH1}/common.sh" && Diy_xinxi
        fi
        if [[ `grep -c "KERNEL_PATCHVER:=" ${Home}/target/linux/${TARGET_BOARD}/Makefile` -eq '1' ]]; then
          PATCHVE="$(egrep -o 'KERNEL_PATCHVER:=[0-9]+\.[0-9]+' ${Home}/target/linux/${TARGET_BOARD}/Makefile |cut -d "=" -f2)"
        elif [[ `grep -c "KERNEL_PATCHVER=" ${Home}/target/linux/${TARGET_BOARD}/Makefile` -eq '1' ]]; then
          PATCHVE="$(egrep -o 'KERNEL_PATCHVER=[0-9]+\.[0-9]+' ${Home}/target/linux/${TARGET_BOARD}/Makefile |cut -d "=" -f2)"
        else
          echo "PATCHVER=unknown" >> $GITHUB_ENV
        fi
        if [[ -n ${PATCHVE} ]] && [[ -f ${Home}/include/kernel-${PATCHVE} ]]; then
          PATCHVER=$(egrep -o "${PATCHVE}\.[0-9]+" ${Home}/include/kernel-${PATCHVE})
          echo "PATCHVER=${PATCHVER}" >> $GITHUB_ENV
        elif [[ -n ${PATCHVE} ]] && [[ ! -f ${Home}/include/kernel-${PATCHVE} ]]; then
          PATCHVER=$(egrep -o "${PATCHVE}\.[0-9]+" ${Home}/include/kernel-version.mk)
          echo "PATCHVER=${PATCHVER}" >> $GITHUB_ENV
        fi
        
    - name: ÂêØÁî®Âú®Á∫øÊõ¥Êñ∞
      continue-on-error: true
      if: env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
        cd openwrt
        source "${PATH1}/upgrade.sh" && Diy_Part2 2>/dev/null
        
    - name: ‰∏ãËΩΩËΩØ‰ª∂ÂåÖ
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: ÂºÄÂßãÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "COMPILESTATUS=success" >> $GITHUB_ENV
        echo "date=$(date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV
        echo "date1=$(date +'%m-%d')" >> $GITHUB_ENV
        
    - name: ‰∏ä‰º†binÊñá‰ª∂Â§π(Âõ∫‰ª∂+ipk)Ëá≥actions
      if: env.COMPILESTATUS == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: firmware+ipk_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: openwrt/bin
        
    - name: ÊâìÂåÖÂõ∫‰ª∂(amlogicÁ≥ªÂàó‰∏ìÁî®)
      continue-on-error: true
      if: env.COMPILESTATUS == 'success' && env.AUTOMATIC_AMLOGIC == 'true'
      run: |
        cd $GITHUB_WORKSPACE
        git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-openwrt.git amlogic
        [ -d amlogic/openwrt-armvirt ] || mkdir -p amlogic/openwrt-armvirt
        cp -f ${Home}/bin/targets/*/*/*.tar.gz amlogic/openwrt-armvirt/ && sync
        cd amlogic
        sudo chmod +x make
        sudo ./make -d -b ${{ env.BUILDSOC }} -k ${{ env.KERNEL }} -a true
        sudo mv -f $GITHUB_WORKSPACE/amlogic/out/* ${Home}/bin/targets/armvirt/64/ && sync
        sudo rm -rf $GITHUB_WORKSPACE/amlogic
    
    - name: Êï¥ÁêÜÂõ∫‰ª∂Êñá‰ª∂Â§π
      id: organizer
      run: |
        if [ ! "${Modelfile}" == "openwrt_amlogic" ]; then
          cp -rf ${Home}/bin/targets/*/* ${Home}/upgrade
          echo
          echo "files under ${Home}/upgrade:"
          ls "${Home}"/upgrade
          echo
        fi
        cd ${Home}/bin/targets/*/*
        rename -v "s/^immortalwrt/openwrt/" *
        if [[ -e ${GITHUB_WORKSPACE}/Clear ]]; then
          cp -Rf ${GITHUB_WORKSPACE}/Clear ./
          chmod +x Clear && source Clear
          rm -rf Clear
        fi
        rm -rf packages
        echo "rename firmwares:"
        test ${{ env.UNLOCK }} && rename -v "s/^openwrt/Unlock-${{ env.PATCHVER }}-${{ env.OpenWrt_name }}-${{ env.CODE }}/" * || rename -v "s/^openwrt/${{ env.PATCHVER }}-${{ env.OpenWrt_name }}-${{ env.CODE }}/" *
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        source "${PATH1}/common.sh" && Diy_release
        echo "ORGANIZERSTATUS=success" >> $GITHUB_ENV
        
    - name: ‰∏ä‰º†Âõ∫‰ª∂Ëá≥actions
      continue-on-error: true
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PATCHVER }}-${{ env.OpenWrt_name }}-${{ env.CODE }}-${{ env.TARGET_PROFILE }}-firmware-${{ env.Compile_Date }}
        path: ${{ env.FIRMWARE }}
        
    - name: ÂèëÂ∏ÉÂõ∫‰ª∂
      continue-on-error: true
      if: env.ORGANIZERSTATUS == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.CODE }}-${{ env.TARGET_PROFILE }}
        tag: ${{ env.date }}
        token: ${{ secrets.REPO_TOKEN }}
        bodyFile: ${{ env.PATH1 }}/releaseinfo.md
        artifacts: "${{ env.FIRMWARE }}/*"
        
    - name: ÂèëÈÄÅ[Âú®Á∫øÊõ¥Êñ∞Âõ∫‰ª∂]Ëá≥release1
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
        cd openwrt
        source "${PATH1}/upgrade.sh" && Diy_Part3
        
    - name: ÂèëÈÄÅ[Âú®Á∫øÊõ¥Êñ∞Âõ∫‰ª∂]Ëá≥release2
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        token: ${{ secrets.REPO_TOKEN }}        
        tag: ${{ env.RELEASE_TAG }}
        bodyFile: ${{ env.PATH1 }}/releaseinfo.md
        artifacts: "openwrt/bin/Firmware/*"
        
    - name: ÂèëÈÄÅ[Âú®Á∫øÊõ¥Êñ∞Âõ∫‰ª∂]Ëá≥release3
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
        mkdir -p Github_Tags
        cd Github_Tags
        wget -q --no-cookie --no-check-certificate https://api.github.com/repos/${{github.repository}}/releases/tags/${{ env.RELEASE_TAG }} -O Github_Tags
        
    - name: ÂèëÈÄÅ[Âú®Á∫øÊõ¥Êñ∞Âõ∫‰ª∂]Ëá≥release4
      if: env.COMPILESTATUS == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: roacn/upload-release-action@master
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: Github_Tags/*
        tag: ${{ env.RELEASE_TAG }}
        overwrite: true
        file_glob: true

    - name: ÁºñËØëÂÆåÊàêTGÊàñpushplusÈÄöÁü•
      if: env.COMPILESTATUS == 'success' && env.PUSH_PLUS_TOKEN && env.SERVERCHAN_SCKEY == 'PUSH' || env.COMPILESTATUS == 'success' && env.TELEGRAM_BOT_TOKEN && env.SERVERCHAN_SCKEY == 'TELE'
      run: |
        if [[ "${SERVERCHAN_SCKEY}" == "TELE" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=Êàë‰∫≤Áà±ÁöÑ‚ú®‰∏ª‰∫∫‚ú®ÔºöÊÇ®‰ΩøÁî®„Äê${{env.CangKu}}„Äë‰ªìÂ∫ì„Äê${{matrix.target}}„ÄëÊñá‰ª∂Â§πÁºñËØëÁöÑ[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]Âõ∫‰ª∂È°∫Âà©ÁºñËØëÂÆåÊàê‰∫ÜÔºÅüíêhttps://github.com/${{github.repository}}/releases" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        elif [[ "${SERVERCHAN_SCKEY}" == "PUSH" ]]; then
          curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]ÁºñËØëÊàêÂäü" --data "content=Êàë‰∫≤Áà±ÁöÑ‚ú®‰∏ª‰∫∫‚ú®ÔºöÊÇ®‰ΩøÁî®„Äê${{env.CangKu}}„Äë‰ªìÂ∫ì„Äê${{matrix.target}}„ÄëÊñá‰ª∂Â§πÁºñËØëÁöÑ[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]Âõ∫‰ª∂È°∫Âà©ÁºñËØëÂÆåÊàê‰∫ÜÔºÅüíêhttps://github.com/${{github.repository}}/releases" "http://www.pushplus.plus/send"
        fi
        
  delete-releases-artifacts:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    steps:
    - name: ËØªÂèñËÆæÁΩÆ
      run: |
        [ ${{ github.event.inputs.rele }} ] && echo "keep_latest=${{ github.event.inputs.rele }}" >> $GITHUB_ENV || echo "keep_latest=6" >> $GITHUB_ENV
        [ ${{ github.event.inputs.days }} ] && echo "retain_days=${{ github.event.inputs.days }}" >> $GITHUB_ENV || echo "retain_days=7" >> $GITHUB_ENV
        
    - name: Ê∏ÖÁêÜActions
      if: env.REPO_TOKEN
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.REPO_TOKEN }}
          repository: ${{ github.repository }}
          keep_minimum_runs: 0
          retain_days: ${{ env.retain_days }}
    
    - name: Âà†Èô§releases
      if: env.REPO_TOKEN
      uses: roacn/delete-older-releases@master
      with:
        repo: ${{ github.repository }}
        keep_latest: ${{ env.keep_latest }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
