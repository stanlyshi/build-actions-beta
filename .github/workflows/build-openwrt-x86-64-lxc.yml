#=================================================
# https://github.com/roacn/build-actions
# Description: Build OpenWrt using GitHub Actions
# Lisence: GNU General Public License v3.0
# Author: Ss.
#=================================================

name: 触发x86-64-lxc
on:
  workflow_dispatch:
    inputs:
      SOURCE_BRANCH:
        description: '选择Lede源码分支'
        required: true
        default: 'master'
        type: choice
        options:
          - 'master'
      CONFIG_FILE:
        description: '选择配置文件'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_32'
          - 'x86_64'
          - 'n1'
      NOTICE_TYPE:
        description: 'Telegram或pushplus信息通知'
        required: true
        default: 'false'
        type: choice
        options:
          - 'Telegram'
          - 'Pushplus'
          - 'Wechat'
      ENABLE_SSH:
        description: 'SSH远程配置固件'
        required: false
        default: 'false'
        type: boolean
      UPLOAD_BIN_DIR:
        description: '上传bin文件夹到 Github Artifacts'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件到 Github Artifacts'
        required: false
        default: 'true'
        type: boolean
      ENABLE_CACHEWRTBUILD:
        description: '缓存加速编译'
        required: false
        default: 'true'
        type: boolean

# 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
  #schedule:
   #- cron: 21 0 * * 5

# 注意：为保证触发正常，请修改BUILD_YML、COMPILE_YML、EVENT_TYPE，
# 其中前2个为文件名；
# 第3个为自定义事件类型，保证在上面2个文件内定义一致，但要避免与其它文件内重复。
env:
  BUILD_YML: build-openwrt-x86-64-lxc.yml
  COMPILE_YML: compile-x86-64-lxc.yml
  EVENT_TYPE: 编译x86-64-lxc固件
  GITHUB_REPO_URL: https://github.com/${{github.repository}}
  GITHUB_REPOSITORY: ${{github.repository}}
  GITHUB_ACTOR: ${{github.actor}}
  GITHUB_WORKFLOW: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    name: 编译 "${{matrix.target}}"
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    env:
      MATRIX_TARGET: ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_lxc]
        
        # [Lede,Lede_lxc,Openwrt,Openwrt_lxc]
        
    steps:
    - name: 准备结束
      uses: actions/checkout@v3

    - name: 读取脚本设置
      run: |
        cd ${GITHUB_WORKSPACE}
        
        source "build/${{matrix.target}}/settings.ini"
        
        common_sh_url="https://raw.githubusercontent.com/stanlyshi/common/main/common.sh"
        curl -fsSL ${common_sh_url} -o ${GITHUB_WORKSPACE}/common.sh
        if [[ $? -ne 0 ]]; then
            wget -q ${common_sh_url} -O ${GITHUB_WORKSPACE}/common.sh
        fi
        chmod +x ${GITHUB_WORKSPACE}/common.sh
        source ${GITHUB_WORKSPACE}/common.sh && parse_settings
        
        [ ${{ github.event.inputs.SOURCE_BRANCH }} ] && echo "SOURCE_BRANCH=${{ github.event.inputs.SOURCE_BRANCH }}" >> $GITHUB_ENV || echo "SOURCE_BRANCH=${SOURCE_BRANCH}" >> $GITHUB_ENV        
        [ ${{ github.event.inputs.CONFIG_FILE }} ] && echo "CONFIG_FILE=${{ github.event.inputs.CONFIG_FILE }}" >> $GITHUB_ENV || echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV     
        [ ${{ github.event.inputs.UPLOAD_BIN_DIR }} ] && echo "UPLOAD_BIN_DIR=${{ github.event.inputs.UPLOAD_BIN_DIR }}" >> $GITHUB_ENV || echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        [ ${{ github.event.inputs.UPLOAD_FIRMWARE }} ] && echo "UPLOAD_FIRMWARE=${{ github.event.inputs.UPLOAD_FIRMWARE }}" >> $GITHUB_ENV || echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        [ ${{ github.event.inputs.ENABLE_CACHEWRTBUILD }} ] && echo "ENABLE_CACHEWRTBUILD=${{ github.event.inputs.ENABLE_CACHEWRTBUILD }}" >> $GITHUB_ENV || echo "ENABLE_CACHEWRTBUILD=${ENABLE_CACHEWRTBUILD}" >> $GITHUB_ENV

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source ${GITHUB_WORKSPACE}/common.sh && init_environment
        
    - name: 下载"${{matrix.target}}"源码
      working-directory: /${{matrix.target}}
      run: |
        source ${GITHUB_WORKSPACE}/common.sh && git_clone_source

    - name: 加载源,补丁和自定义设置
      run: |
        source ${GITHUB_WORKSPACE}/common.sh && do_diy

    - name: SSH远程连接（制作.config配置文件）
      if: ${{ github.event.inputs.ENABLE_SSH }} == 'true'
      uses: danshui-git/debugger-action@main
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成"${{matrix.target}}"配置文件
      id: compileop
      run: |
        source ${GITHUB_WORKSPACE}/common.sh && make_defconfig

    - name: 上传.config配置文件至artifacts
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: .config_${{ env.SOURCE_ABBR }}_${{ env.TARGET_PROFILE }}_${{ env.COMPILE_DATE }}
        path: ${GITHUB_WORKSPACE}/${CONFIG_FILE}

    - name: 更新REPO
      continue-on-error: true
      if: ${{ env.REPO_TOKEN }}
      run: |
        source ${GITHUB_WORKSPACE}/common.sh && update_repo

    - name: 编译信息
      continue-on-error: true
      run: |
        source ${GITHUB_WORKSPACE}/common.sh && compile_info

  compile-dispatch:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    steps:
    - name: 触发yml启动"${{matrix.target}}"编译
      continue-on-error: true
      run: |
        curl \
        -X POST https://api.github.com/repos/${{ github.repository }}/dispatches \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
        -d '{"event_type": "${{ env.EVENT_TYPE }}"}'
        
  delete-releases-artifacts:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
        
    - name: 清理Actions空间
      if: ${{ env.REPO_TOKEN }}
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.REPO_TOKEN }}
          repository: ${{ github.repository }}
          keep_minimum_runs: 0
          retain_days: 7
    
    - name: 删除releases
      if: ${{ env.REPO_TOKEN }}
      uses: roacn/delete-older-releases@master
      with:
        repo: ${{ github.repository }}
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
